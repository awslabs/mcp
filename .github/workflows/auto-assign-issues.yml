name: Auto-Assign Code Owners to Issues

on:
  schedule:
    # Run daily at 9:00 UTC (adjustable)
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual assignments)'
        required: false
        default: false
        type: boolean
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean
  issues:
    # Also run when new issues are created
    types: [opened]
permissions:
  contents: read
  issues: write
  pull-requests: read
  repository-projects: write
jobs:
  assign-code-owners:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        # Install any required dependencies for the script
        # pip install requests pygithub  # if using direct API calls
    - name: Install GitHub CLI
      run: |
        # GitHub CLI for project board operations and fallback functionality
        sudo apt update
        sudo apt install gh -y
    - name: Set up MCP environment
      run: |
        # Install uvx for MCP server usage
        pip install uv
        # The script will use MCP server calls for GitHub operations
    - name: Run assignment script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_PROJECT_URL: https://github.com/orgs/awslabs/projects/192
        # Pass workflow inputs as environment variables
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        VERBOSE: ${{ github.event.inputs.verbose || 'false' }}
      run: |
        # Build command line arguments
        ARGS=""
        if [ "$DRY_RUN" = "true" ]; then
          ARGS="$ARGS --dry-run"
        fi
        if [ "$VERBOSE" = "true" ]; then
          ARGS="$ARGS --verbose"
        fi
        # For scheduled runs, always use verbose logging for auditability
        if [ "${{ github.event_name }}" = "schedule" ]; then
          ARGS="$ARGS --verbose"
        fi
        echo "Running assignment script with args: $ARGS"
        python .github/workflows/scripts/assign_code_owners.py $ARGS
    - name: Create assignment summary
      if: always()  # Run even if previous step fails
      run: |
        echo "## Assignment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ env.DRY_RUN }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        # Add link to workflow run
        echo "View full logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
    - name: Notify on failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          // Create an issue if scheduled run fails
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Automated code owner assignment failed - ${new Date().toISOString().split('T')[0]}`,
            body: `The scheduled code owner assignment workflow failed.

            **Workflow Run**: [View Details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            **Failure Time**: ${new Date().toISOString()}

            Please check the workflow logs and fix any issues.

            /cc @awslabs/mcp-admins`,
            labels: ['bug', 'automation', 'needs-attention']
          });
          console.log(`Created issue #${issue.data.number} for workflow failure`);
  # Separate job for single issue assignment (when issues are opened)
  assign-single-issue:
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install uv
    - name: Assign new issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      run: |
        echo "New issue #$ISSUE_NUMBER created, checking for assignment..."
        # Run with specific issue number (would need to modify script to accept this)
        python .github/workflows/scripts/assign_code_owners.py --verbose
        echo "Issue assignment check completed"
    - name: Add issue to project
      uses: actions/add-to-project@v0.6.0
      with:
        project-url: https://github.com/orgs/awslabs/projects/192
        github-token: ${{ secrets.GITHUB_TOKEN }}
