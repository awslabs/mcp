name: Python

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.find-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Find Python packages
        id: find-packages
        working-directory: src
        run: |
          PACKAGES=$(find . -name pyproject.toml -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  build:
    needs: [detect-packages]
    if: ${{ needs.detect-packages.outputs.packages != '[]' && needs.detect-packages.outputs.packages != '' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.packages) }}
    name: Build ${{ matrix.package }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install uv
        uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1

      - name: Set up Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version-file: "src/${{ matrix.package }}/.python-version"
          # cache: uv (not supported)

      - name: Cache GraphViz
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
        id: cache-graphviz
        with:
          path: "~/graphviz"
          key: graphviz

      - name: Install Graphviz
        env:
          CACHE_HIT: ${{steps.cache-graphviz.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/graphviz/* /
          else
            sudo apt-get update && sudo apt-get install -y graphviz
            mkdir -p ~/graphviz
            sudo dpkg -L graphviz | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/graphviz/
          fi

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Security check - Bandit
        id: bandit-check
        working-directory: src/${{ matrix.package }}
        run: bandit -r --severity-level medium --confidence-level medium -f html -o bandit-report-${{ matrix.package }}.html -c "pyproject.toml" . || echo "::set-output name=status::failure"

      - name: Store Bandit as Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bandit-report-${{ matrix.package }}.html
          path: src/${{ matrix.package }}/bandit-report-${{ matrix.package }}.html

      - name: Stop on Bandit failure
        if: steps.bandit-check.outputs.status == 'failure'
        run: exit 1

      - name: Install dependencies
        working-directory: src/${{ matrix.package }}
        run: uv sync --frozen --all-extras --dev

      - name: Run tests
        working-directory: src/${{ matrix.package }}
        run: |
          if [ -d "tests" ]; then
            uv run --frozen pytest
          else
            echo "No tests directory found, skipping tests"
          fi

      - name: Run pyright
        working-directory: src/${{ matrix.package }}
        run: uv run --frozen pyright

      - name: Run ruff format
        working-directory: src/${{ matrix.package }}
        run: uv run --frozen ruff format .

      - name: Run ruff check
        working-directory: src/${{ matrix.package }}
        run: uv run --frozen ruff check .

      - name: Build package
        working-directory: src/${{ matrix.package }}
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-${{ matrix.package }}
          path: src/${{ matrix.package }}/dist/
