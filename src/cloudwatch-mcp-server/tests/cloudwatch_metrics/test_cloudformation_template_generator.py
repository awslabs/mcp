"""Tests for CloudFormation template generator."""

import pytest
from awslabs.cloudwatch_mcp_server.cloudwatch_metrics.cloudformation_template_generator import (
    CloudFormationTemplateGenerator,
)
from awslabs.cloudwatch_mcp_server.cloudwatch_metrics.constants import COMPARISON_OPERATOR_ANOMALY


class MockThreshold:
    """Mock threshold object for testing."""

    def __init__(self, sensitivity=2):
        """Initialize mock threshold."""
        self.sensitivity = sensitivity


class TestCloudFormationTemplateGenerator:
    """Test CloudFormation template generation."""

    @pytest.fixture
    def generator(self):
        """Create a CloudFormationTemplateGenerator instance."""
        return CloudFormationTemplateGenerator()

    def test_format_alarm_data_with_anomaly_threshold(self, generator):
        """Test processing alarm data with anomaly detection threshold."""
        alarm_data = {
            'threshold': {'sensitivity': 3},
            'comparisonOperator': COMPARISON_OPERATOR_ANOMALY,
            'alarmDescription': 'Test alarm',
        }

        result = generator._format_anomaly_detection_alarm_data(alarm_data)

        assert result['sensitivity'] == 3
        assert result['alarmDescription'] == 'Test alarm'

    def test_format_alarm_data_defaults(self, generator):
        """Test processing alarm data applies defaults."""
        alarm_data = {
            'threshold': {'sensitivity': 2},
            'comparisonOperator': COMPARISON_OPERATOR_ANOMALY,
        }

        result = generator._format_anomaly_detection_alarm_data(alarm_data)

        assert result['alarmDescription'] == 'CloudWatch alarm generated by CloudWatch MCP server.'
        assert result['statistic'] == 'Average'
        assert result['sensitivity'] == 2

    def test_generate_template_non_anomaly_returns_empty(self, generator):
        """Test that non-anomaly detection alarms return empty template."""
        alarm_data = {
            'comparisonOperator': 'GreaterThanThreshold'  # Not anomaly detection
        }

        result = generator.generate_template(alarm_data)

        assert result == {}

    def test_is_anomaly_detection_alarm(self, generator):
        """Test anomaly detection alarm identification."""
        anomaly_alarm = {'comparisonOperator': COMPARISON_OPERATOR_ANOMALY}
        static_alarm = {'comparisonOperator': 'GreaterThanThreshold'}

        assert generator._is_anomaly_detection_alarm(anomaly_alarm) is True
        assert generator._is_anomaly_detection_alarm(static_alarm) is False
