"""Tests for the workflow_prompts module."""

import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from awslabs.openapi_mcp_server.prompts.workflow_prompts import (
    generate_generic_workflow_prompts,
    _generate_list_get_update_workflow,
    _generate_search_create_workflow,
)


def test_generate_list_get_update_workflow():
    """Test generating a list-get-update workflow."""
    # Setup test data
    resource_type = "Item"
    list_op = {"operationId": "listItems"}
    get_op = {"operationId": "getItem"}
    update_op = {"operationId": "updateItem"}
    
    # Call the function
    result = _generate_list_get_update_workflow(resource_type, list_op, get_op, update_op)
    
    # Verify the result
    assert "### List, Get, and Update Items" in result
    assert "This workflow demonstrates how to list Items, get details for a specific Item, and update it." in result
    assert "```python" in result
    assert "# Step 1: List all Items" in result
    assert "item_list = await listItems()" in result
    assert "# Step 2: Get details for a specific Item" in result
    assert "item_details = await getItem(item_id)" in result
    assert "# Step 3: Update the Item" in result
    assert "updated_item = await updateItem(item_id, update_data)" in result
    assert "```" in result


def test_generate_search_create_workflow():
    """Test generating a search-create workflow."""
    # Setup test data
    search_op = {"operationId": "searchItems"}
    create_op = {"operationId": "createItem"}
    
    # Call the function
    result = _generate_search_create_workflow(search_op, create_op)
    
    # Verify the result
    assert "### Search and Create Item" in result
    assert "This workflow demonstrates how to search for Items and create a new one if needed." in result
    assert "```python" in result
    assert "# Step 1: Search for Items with specific criteria" in result
    assert "search_results = await searchItems(**search_criteria)" in result
    assert "# Step 2: Create a new Item if not found" in result
    assert "new_item = await createItem(new_item_data)" in result
    assert "```" in result


@pytest.mark.asyncio
async def test_generate_generic_workflow_prompts_with_list_get_update():
    """Test generating generic workflow prompts with list-get-update pattern."""
    # Setup test data
    server = MagicMock()
    api_name = "test_api"
    api_structure = {
        "/items": {
            "get": {
                "operationId": "listItems",
                "tags": ["items"]
            }
        },
        "/items/{itemId}": {
            "get": {
                "operationId": "getItem",
                "tags": ["items"]
            },
            "put": {
                "operationId": "updateItem",
                "tags": ["items"]
            }
        }
    }
    components = {}
    
    # Mock the _generate_list_get_update_workflow function
    with patch('awslabs.openapi_mcp_server.prompts.workflow_prompts._generate_list_get_update_workflow',
               return_value="mocked_list_get_update_workflow"):
        
        # Call the function
        result = await generate_generic_workflow_prompts(server, api_name, api_structure, components)
        
        # Verify the result
        assert "\n## Common Workflows\n\n" in result
        assert "mocked_list_get_update_workflow" in result


@pytest.mark.asyncio
async def test_generate_generic_workflow_prompts_with_search_create():
    """Test generating generic workflow prompts with search-create pattern."""
    # Setup test data
    server = MagicMock()
    api_name = "test_api"
    api_structure = {
        "/items/search": {
            "post": {
                "operationId": "searchItems",
                "tags": ["items"]
            }
        },
        "/items": {
            "post": {
                "operationId": "createItem",
                "tags": ["items"]
            }
        }
    }
    components = {}
    
    # Mock the _generate_search_create_workflow function
    with patch('awslabs.openapi_mcp_server.prompts.workflow_prompts._generate_search_create_workflow',
               return_value="mocked_search_create_workflow"):
        
        # Call the function
        result = await generate_generic_workflow_prompts(server, api_name, api_structure, components)
        
        # Verify the result
        assert "\n## Common Workflows\n\n" in result
        assert "mocked_search_create_workflow" in result


@pytest.mark.asyncio
async def test_generate_generic_workflow_prompts_no_patterns():
    """Test generating generic workflow prompts with no recognized patterns."""
    # Setup test data
    server = MagicMock()
    api_name = "test_api"
    api_structure = {
        "/items": {
            "get": {
                "operationId": "listItems",
                "tags": ["items"]
            }
        }
    }
    components = {}
    
    # Call the function
    result = await generate_generic_workflow_prompts(server, api_name, api_structure, components)
    
    # Verify the result
    assert "\n## Common Workflows\n\n" in result
    assert "No common workflows identified for this API." in result


@pytest.mark.asyncio
async def test_generate_generic_workflow_prompts_empty_api():
    """Test generating generic workflow prompts with an empty API."""
    # Setup test data
    server = MagicMock()
    api_name = "test_api"
    api_structure = {}
    components = {}
    
    # Call the function
    result = await generate_generic_workflow_prompts(server, api_name, api_structure, components)
    
    # Verify the result
    assert "\n## Common Workflows\n\n" in result
    assert "No common workflows identified for this API." in result
