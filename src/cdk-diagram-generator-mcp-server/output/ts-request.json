{
  "jsonrpc": "2.0",
  "id": "1",
  "method": "call_tool",
  "params": {
    "name": "generate_diagram_from_code",
    "arguments": {
      "code": "import * as cdk from 'aws-cdk-lib';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\nimport * as apigateway from 'aws-cdk-lib/aws-apigateway';\nimport * as dynamodb from 'aws-cdk-lib/aws-dynamodb';\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport { Construct } from 'constructs';\n\n/**\n * Example CDK stack demonstrating various AWS resources and their relationships\n */\nexport class ExampleStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // Create a VPC\n    const vpc = new ec2.Vpc(this, 'MainVPC', {\n      maxAzs: 2,\n      natGateways: 1,\n      subnetConfiguration: [\n        {\n          name: 'public',\n          subnetType: ec2.SubnetType.PUBLIC,\n        },\n        {\n          name: 'private',\n          subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n        },\n      ],\n    });\n\n    // Create a security group for Lambda\n    const lambdaSecurityGroup = new ec2.SecurityGroup(this, 'LambdaSecurityGroup', {\n      vpc,\n      description: 'Security group for Lambda functions',\n      allowAllOutbound: true,\n    });\n\n    // Create a DynamoDB table\n    const table = new dynamodb.Table(this, 'ItemsTable', {\n      partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n\n    // Create an S3 bucket\n    const bucket = new s3.Bucket(this, 'DataBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n    });\n\n    // Create a Lambda function\n    const apiFunction = new lambda.Function(this, 'ApiFunction', {\n      runtime: lambda.Runtime.NODEJS_18_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromInline(`\n        exports.handler = async function(event, context) {\n          return {\n            statusCode: 200,\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ message: 'Hello from Lambda!' })\n          };\n        };\n      `),\n      vpc,\n      securityGroups: [lambdaSecurityGroup],\n      environment: {\n        TABLE_NAME: table.tableName,\n        BUCKET_NAME: bucket.bucketName,\n      },\n    });\n\n    // Grant permissions\n    table.grantReadWriteData(apiFunction);\n    bucket.grantReadWrite(apiFunction);\n\n    // Create a REST API\n    const api = new apigateway.RestApi(this, 'ItemsApi', {\n      description: 'API for managing items',\n      deployOptions: {\n        stageName: 'prod',\n      },\n    });\n\n    // Add a resource and method to the API\n    const items = api.root.addResource('items');\n    items.addMethod('GET', new apigateway.LambdaIntegration(apiFunction));\n    items.addMethod('POST', new apigateway.LambdaIntegration(apiFunction));\n\n    // Create a processor Lambda function\n    const processorFunction = new lambda.Function(this, 'ProcessorFunction', {\n      runtime: lambda.Runtime.NODEJS_18_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromInline(`\n        exports.handler = async function(event, context) {\n          console.log('Processing data...');\n          return { success: true };\n        };\n      `),\n      vpc,\n      securityGroups: [lambdaSecurityGroup],\n    });\n\n    // Grant permissions\n    table.grantRead(processorFunction);\n    bucket.grantRead(processorFunction);\n\n    // Create IAM role for custom resource\n    const customResourceRole = new iam.Role(this, 'CustomResourceRole', {\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    });\n\n    // Add outputs\n    new cdk.CfnOutput(this, 'ApiEndpoint', {\n      value: api.url,\n      description: 'API Gateway endpoint URL',\n    });\n\n    new cdk.CfnOutput(this, 'BucketName', {\n      value: bucket.bucketName,\n      description: 'S3 bucket name',\n    });\n  }\n}\n\n// Create the CDK app and stack\nconst app = new cdk.App();\nnew ExampleStack(app, 'ExampleStack');\n",
      "outputPath": "/Users/miketran/WebstormProjects/mcp/src/cdk-diagram-generator-mcp-server/output/typescript-example.drawio",
      "language": "typescript"
    }
  }
}