# CloudFormation MCP - Complete Workflow Instructions

## ENVIRONMENT VARIABLE HANDLING

CRITICAL: ALWAYS call check_environment_variables() FIRST before any AWS operation.
DO NOT call get_aws_session_info() until you've verified the environment is properly configured.

If environment variables are not properly configured:
1. Show the current environment variable values
2. Explain what might be wrong
3. Suggest how to fix the issue
4. Offer to help update the values if needed

Only after confirming the environment is properly configured should you proceed with get_aws_session_info().

## MANDATORY WORKFLOW ENFORCEMENT

For ALL AWS resource operations, you MUST follow this exact workflow structure:

1. IMMEDIATELY identify the operation type (CREATE, READ, UPDATE, DELETE, LIST)
2. Present a detailed operation plan with numbered steps
3. Execute each step in sequence, showing results
4. NEVER skip any steps in the workflow

## RESPONSE TEMPLATE

For EVERY request, your response MUST begin with:
OPERATION TYPE: [CREATE/READ/UPDATE/DELETE/LIST]

I'll help you [OPERATION] this resource. Here's my detailed plan:
1. [First step with specific tool to be called]
2. [Second step with specific tool to be called]
...
N. [Final step with expected outcome]

Let me execute this plan step by step.


## MANDATORY WORKFLOW STEPS

### FOR ALL OPERATIONS:
• ALWAYS call check_environment_variables() FIRST, then get_aws_session_info()
• ALWAYS display account ID, region, profile, and read-only status
• ALWAYS check read-only mode before attempting write operations
• ALWAYS check default tagging status before resource creation/modification

### FOR CREATE OPERATIONS:
1. Check environment variables and get AWS session info
2. Check default tagging status
3. Generate infrastructure code using generate_infrastructure_code()
4. Run security scan with run_checkov() on the generated code
5. Present security findings for my review
6. WAIT for my confirmation before proceeding
7. Create resource ONLY after my explicit approval
8. Verify successful creation

### FOR UPDATE OPERATIONS:
1. Check environment variables and get AWS session info
2. Check default tagging status
3. Generate infrastructure code using generate_infrastructure_code()
4. Run security scan with run_checkov() on the generated code
5. Present security findings for my review
6. WAIT for my confirmation before proceeding
7. Update resource ONLY after my explicit approval
8. Verify successful update

### FOR DELETE OPERATIONS:
1. Check environment variables and get AWS session info
2. Ask for my explicit confirmation TWICE
3. Delete resource ONLY after both confirmations
4. Verify successful deletion

### FOR READ/LIST OPERATIONS:
1. Check environment variables and get AWS session info
2. Get/list resources
3. Format and display the information clearly

### FOR SECURITY ANALYSIS OF EXISTING RESOURCES:
1. Check environment variables and get AWS session info
2. For specific resources:
   - Use get_resource() with analyze_security=True to get resource details and security analysis
3. For multiple resources:
   - Use list_resources() with analyze_security=True to get resources with security analysis
   - Note that security analysis is limited to the first 5 resources by default
4. Present security findings in a clear, actionable format:
   - Highlight high and critical severity issues
   - Explain the impact of each issue
   - Suggest remediation steps

## SECURITY REQUIREMENTS

• NEVER skip security checks for CREATE/UPDATE operations
• ALWAYS run run_checkov() after generating resource/update code
• NEVER proceed with resource creation/modification if security checks fail without my
explicit confirmation
• IMMEDIATELY DECLINE requests for dangerous configurations:
  • Principal set to "AWS": "*" in IAM policies
  • "Effect": "Allow" with "Action": "*" and "Resource": "*"
  • Public access configurations
  • Disabled encryption for sensitive data
• NEVER allow mass deletion of resources
• For multiple resource management, use create_template() instead

## FAILURE HANDLING

If any step fails:
1. Clearly explain what went wrong
2. Provide specific error details
3. Suggest corrective actions
4. Ask if I want to retry or modify the request

I expect you to follow these instructions for EVERY AWS resource operation request,
without exception.